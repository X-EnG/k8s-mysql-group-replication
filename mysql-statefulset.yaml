apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
#create preconfiguration configs
      - name: init-mysql
        image: mysql:5.7
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          cp /mnt/config-map/master-master.cnf /mnt/conf.d/
          echo "loose-group_replication_local_address=mysql-$ordinal.mysql:24901" >> /mnt/conf.d/master-master.cnf
          echo "loose-group_replication_group_seeds=mysql-0.mysql:24901,mysql-1.mysql:24901,mysql-2.mysql:24901" >> /mnt/conf.d/master-master.cnf
          echo "report_host=mysql-$ordinal.mysql" >> /mnt/conf.d/master-master.cnf
          if [[ $ordinal -ne 0 ]]; then
            echo "super_read_only=ON" >> /mnt/conf.d/master-master.cnf
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: gcr.io/google-samples/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Skip the clone if data already exists.
          # TODO: think of something like: if data older than 24h- overwrit it!
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip the clone on master (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          #Add support to crashed master
          # Clone data from previous peer.
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql
          date +%s > /var/lib/mysql/timestamp
          rm -rf /var/lib/mysql/auto.cnf
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "1"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: config-map
          mountPath: /mnt/config-map
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
            #command: ["true"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 2
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            #command: ["bash", "/mnt/config-map/readiness.sh"]
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
            #command: ["true"]
          initialDelaySeconds: 30
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: gcr.io/google-samples/xtrabackup:1.0
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo "Waiting for mysqld to be ready (accepting connections)"
          until mysql -h mysql-$ordinal.mysql -e "SELECT 1"; do sleep 1; done
          if [[ $ordinal -eq 0 && ! -f /var/lib/mysql/configured ]]; then
            bash /mnt/config-map/config.sh
            date > /var/lib/mysql/configured
          fi
          # Bootstrap if there are no RG members
          replication_group_members=`mysql -h mysql-rw -sNe \
           "SELECT count(*) FROM performance_schema.replication_group_members WHERE MEMBER_STATE='ONLINE'" || echo 0`
          if [[ $ordinal -eq 0 && $replication_group_members -eq 0 ]]; then
            bash /mnt/config-map/bootstrap-repl.sh
            date > /var/lib/mysql/bootstraped
          else
          # Otherways start replication
             cd /var/lib/mysql
             bash /mnt/config-map/repl.sh
          fi
          cd /var/lib/mysql
          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: config-map
          mountPath: /mnt/config-map
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
